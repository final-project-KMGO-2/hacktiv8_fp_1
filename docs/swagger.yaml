basePath: /
definitions:
  common.Response:
    properties:
      data: {}
      errors: {}
      message:
        type: string
      status:
        type: boolean
    type: object
  dto.TodosCreateDTO:
    properties:
      category:
        type: string
      deadline:
        type: string
      description:
        type: string
      id:
        type: integer
      is_complete:
        type: boolean
      title:
        type: string
    type: object
  dto.TodosUpdateDTO:
    properties:
      category:
        type: string
      deadline:
        type: string
      description:
        type: string
      is_complete:
        type: boolean
      title:
        type: string
    type: object
  dto.UserLoginDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.UserRegisterDTO:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
    type: object
  entity.Todos:
    properties:
      category:
        type: string
      createdAt:
        type: string
      deadline:
        type: string
      deletedAt:
        type: string
      description:
        type: string
      id:
        type: integer
      is_complete:
        type: boolean
      name:
        type: string
      updatedAt:
        type: string
    type: object
host: https://todo-list-fph8.herokuapp.com
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Projek todo list untuk final projek pertama
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Go + Gin Todo API
  version: "1.0"
paths:
  /auth/sign-in:
    post:
      operationId: sign-in
      parameters:
      - description: email and password sample :(alexd@gmail.com, admin)
        in: body
        name: creds
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Response'
      summary: sign-in/login
  /auth/sign-up:
    post:
      operationId: create-user
      parameters:
      - description: user data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegisterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.Response'
      summary: register user baru
  /todos:
    get:
      operationId: get-todos
      parameters:
      - description: 'Authorization (put '
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Todos'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Response'
      summary: Gets all todo item
    post:
      operationId: create-todo
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: todos information
        in: body
        name: information
        required: true
        schema:
          $ref: '#/definitions/dto.TodosCreateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Todos'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Response'
      summary: Create a todo item
  /todos/{id}:
    delete:
      operationId: delete-todo-by-id
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: todo ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Response'
      summary: delete a todo item by ID
    get:
      operationId: get-todo-by-id
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: todo ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Todos'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Response'
      summary: get a todo item by ID
    put:
      operationId: update-todo-by-id
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      - description: todos information
        in: body
        name: information
        required: true
        schema:
          $ref: '#/definitions/dto.TodosUpdateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Todos'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.Response'
      summary: update a todo item by ID
swagger: "2.0"
